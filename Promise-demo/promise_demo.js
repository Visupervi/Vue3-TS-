// 语法上来说Promise是一个构造函数
// 从功能上说，promise对象用来封装异步操作并获取其结果
// Promise的状态变化 pending ---> resolved或者rejected
// 只能从pending到resolved或者pending到rejected，如果抛出异常也会rejected
// 一个promise对象只能改变一次，无论成功还是失败，都会有一个结果，成功一般称为value，失败称为reason
// 一个promise指定都个成功/失败的回调函数，都会调用么？都会调用
// 指定回调函数的方式更加灵活
// 旧的是必须在启动异步任务前指定
// promise： 启动异步任务=》返回promise对象=》 给promise绑定回调函数（也可以在异步任务执行完成后指定）
// 支持链式调用，可以解决回调地域问题
// 回调地狱：回调函数嵌套调用，外部回调函数的异步执行结果是嵌套的回调函数的执行条件
// 不便于阅读/不便于异常处理
// 异常穿透
// 中断promise链
// 在回调函数中返回一个pendding状态的promise

// 关键的问题
/**
 * 改变promise状态和指定回调函数谁先谁后？
 * （1）都有可能，正常情况下是指定回调函数改变状态，但也可以先改变状态再指定回调
 * （2）如何先修改状态再指定回调？
 *    1️⃣ 在执行器中直接使用resolve或者reject
 *    2️⃣ 延迟更长时间再去调用then
 *  (3) 什么时候才能得到数据？
 *    1️⃣ 如果先指定的回调，那当状态发生改变时，回调函数就会调用，得到数据
 *    2️⃣ 如果先改变状态，那当指定回调时，回调函数就会调用，得到数据
 */

/**
 * promise.then 返回的是一个新的promise，这个promise的状态是由什么决定的？
 * 
 * 由then指定的回调函数执行的结果决定的
 * 
 * 1️⃣ 如果抛出异常，新的promise状态为rejected，reason为抛出的异常
 * 2️⃣ 如果返回的是非promise的任意值，新promise变为resolved,value为返回值
 * 3️⃣ 如果返回的是另一个新的promise，此promise的结果就会成为新的promise的结果
 */

